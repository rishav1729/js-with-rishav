01.filter

function activeUsers(arr){
    let newarr = [];
    arr.filter((element) => {
        if(element.isActive == true){
            return newarr.push(arr.name)
        } else {
            return false
        }
    })
    return newarr
}

console.log(activeUsers(usersDetails))

issues :

arr.name is incorrect:

arr is the entire array, not a single object. You should use element.name to access the name property of each object in the array.

Using filter incorrectly:

filter is used to create a new array by including only elements that pass a condition. However, in this code, you're trying to modify another array (newarr) inside filter, which is not its intended purpose.
Also, filter returns an array, but you're not using the return value of filter.

push inside filter:

Adding elements to newarr inside filter is unnecessary. It mixes two different concepts: filtering and mutating an array.

% ============================================================

2.hoisting of let  const

1. "let" and "const" declarations are hoisted, but they are hoisted very differently from the "var" declarations.

2. Memory is assigned to "var" declarations, and "var" declarations are always attached to the global object "window". In case of "let" and "const", they are allocated memory in some different memory space other than global space known as "Script", and this is what we call hoisting. The "let" and "const" declarations are not attached to the global object "window". And this is the reason you cannot access these "let" and "const" variables before you have put some value in them.

3. Temporal dead zone is the time since when "let" & "const" variables were hoisted (set as "undefined") and till it is initialized with some value, the time between these two phenomena's is known as the Temporal Dead Zone. Whenever you try to access a "let" or "const" variable in the temporal dead zone, then it will always give you reference error.

4. var declarations are always attached to the window object, provided they've been declared in the global scope. let and const declarations are never attached to the window object, as these variables are never stored in the global memory space. 

5. let and const are more strict than var. Re-declaration of let is not allowed in JS. The JS engine will give a syntax error, it is not allowed in the same scope.

6. How to avoid temporal dead zone?
Sometimes the temporal dead zone can mess our code as a developer. The best way to avoid the temporal dead zone is to always put your declarations and initializations on the top of the code. So, that as soon as your code starts running, it hits the initialization part at the first, and then you go into the logic, and then you do something with these variables. Otherwise, you'll run into unexpected errors in your code. 
This way we're shrinking the temporal dead zone nearly to zero. We've minimized the TDZ nearly to zero, while moving all the initializations at the top, so that nothing happens before these initializations.

js use diff memory than global execution context to store let and cost. which is reason behind "temporal dead zone"

% ====================================================================
